# -*- coding: utf-8 -*-
"""20SW025.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mxqJwrlf0jzbZenSfWWp0iUHdDC1jE_9
"""

#Task#01
import numpy as np

A = np.arange(2, 34, 2).reshape(4, 4)

print(A)

#task 2
A = np.arange(1, 26).reshape(5, 5)
print("A:")
print(A)

B = A[A % 2 != 0]
print("\nB (odd numbers from A):")
print(B)

#Task#03
import numpy as np

# Create a 4x4 ndarray with columns filled using broadcasting
Y = np.arange(1, 5).reshape(4, 1) * np.ones((1, 4))

print(Y)

#Task#04
from google.colab import drive
drive.mount('/NumPy.ipnyb')

import numpy as np

# Create a 1000x20 ndarray with random integers in the range [0, 5001)
X = np.random.randint(0, 5001, size=(1000, 20))
# Print the shape of X
print(X.shape)

# Calculate the average of the values in each column of X
ave_cols = np.mean(X, axis=0)

# Calculate the standard deviation of the values in each column of X
std_cols = np.std(X, axis=0)


print("Shape of ave_cols:", ave_cols.shape)
print("Shape of std_cols:", std_cols.shape)

# Mean normalize X
X_norm = (X - ave_cols) / std_cols

print("Mean normalized X:")
print(X_norm)

# Print the average of all the values of X_norm
ave_all_values = np.mean(X_norm)
print("Average of all values in X_norm:", ave_all_values)

# Print the average of the minimum value in each column of X_norm
ave_min_values = np.mean(np.min(X_norm, axis=0))
print("Average of minimum values in each column of X_norm:", ave_min_values)

# Print the average of the maximum value in each column of X_norm
ave_max_values = np.mean(np.max(X_norm, axis=0))
print("Average of maximum values in each column of X_norm:", ave_max_values)

# We create a random permutation of integers 0 to 4
np.random.permutation(5)

# Create a random permutation of row indices of X_norm
row_indices = np.random.permutation(X_norm.shape[0])

print("Random permutation of row indices:", row_indices)


# Define the ratios for training, cross-validation, and test sets
train_ratio = 0.6
cross_val_ratio = 0.2
test_ratio = 0.2

# Calculate the sizes of each set based on the ratios
num_rows = X_norm.shape[0]
num_train = int(train_ratio * num_rows)
num_cross_val = int(cross_val_ratio * num_rows)
num_test = int(test_ratio * num_rows)

# Use row_indices to split the data into sets
X_train = X_norm[row_indices[:num_train]]
X_crossVal = X_norm[row_indices[num_train:num_train + num_cross_val]]
X_test = X_norm[row_indices[num_train + num_cross_val:]]

print("X_train shape:", X_train.shape)
print("X_crossVal shape:", X_crossVal.shape)
print("X_test shape:", X_test.shape)